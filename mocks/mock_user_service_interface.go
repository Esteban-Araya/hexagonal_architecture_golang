// Code generated by MockGen. DO NOT EDIT.
// Source: Project/pkg/app/user/port (interfaces: UserServiceInterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_user_service_interface.go -package=mocks Project/pkg/app/user/port UserServiceInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "Project/pkg/app/user/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateUserService mocks base method.
func (m *MockUserServiceInterface) CreateUserService(arg0 domain.CreateUserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserService indicates an expected call of CreateUserService.
func (mr *MockUserServiceInterfaceMockRecorder) CreateUserService(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserService", reflect.TypeOf((*MockUserServiceInterface)(nil).CreateUserService), arg0)
}

// LoginUserService mocks base method.
func (m *MockUserServiceInterface) LoginUserService(arg0 domain.LoginUserModel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUserService indicates an expected call of LoginUserService.
func (mr *MockUserServiceInterfaceMockRecorder) LoginUserService(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserService", reflect.TypeOf((*MockUserServiceInterface)(nil).LoginUserService), arg0)
}

// UserUpdateNameService mocks base method.
func (m *MockUserServiceInterface) UserUpdateNameService(arg0 domain.UserUpdateName, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateNameService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserUpdateNameService indicates an expected call of UserUpdateNameService.
func (mr *MockUserServiceInterfaceMockRecorder) UserUpdateNameService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateNameService", reflect.TypeOf((*MockUserServiceInterface)(nil).UserUpdateNameService), arg0, arg1)
}
