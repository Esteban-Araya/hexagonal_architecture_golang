// Code generated by MockGen. DO NOT EDIT.
// Source: Project/pkg/app/user/storage (interfaces: DBinterface)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_user_db_interface.go -package=mocks Project/pkg/app/user/storage DBinterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBinterface is a mock of DBinterface interface.
type MockDBinterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBinterfaceMockRecorder
}

// MockDBinterfaceMockRecorder is the mock recorder for MockDBinterface.
type MockDBinterfaceMockRecorder struct {
	mock *MockDBinterface
}

// NewMockDBinterface creates a new mock instance.
func NewMockDBinterface(ctrl *gomock.Controller) *MockDBinterface {
	mock := &MockDBinterface{ctrl: ctrl}
	mock.recorder = &MockDBinterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBinterface) EXPECT() *MockDBinterfaceMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockDBinterface) Exec(arg0 string, arg1 ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBinterfaceMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBinterface)(nil).Exec), varargs...)
}

// Query mocks base method.
func (m *MockDBinterface) Query(arg0 string, arg1 ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBinterfaceMockRecorder) Query(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBinterface)(nil).Query), varargs...)
}
